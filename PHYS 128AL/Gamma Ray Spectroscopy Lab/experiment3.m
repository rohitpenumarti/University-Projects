function [fitresult, gof] = experiment3(NaturalLogarithmofPhotopeakEnergy, NaturalLogarithmofFractionalUncertainty, uncertainties)
%CREATEFIT(NATURALLOGARITHMOFFRACTIONALUNCERTAINTY3,NATURALLOGARITHMOFPHOTOPEAKENERGY3)
%  Create a fit.
%
%  Data for 'untitled fit 4' fit:
%      X Input : NaturalLogarithmofFractionalUncertainty3
%      Y Output: NaturalLogarithmofPhotopeakEnergy3
%  Output:
%      fitresult : a fit object representing the fit.
%      gof : structure with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 24-Nov-2019 17:35:35


%% Fit: 'untitled fit 4'.
[xData, yData, error] = prepareCurveData( NaturalLogarithmofPhotopeakEnergy, NaturalLogarithmofFractionalUncertainty, uncertainties );

% Set up fittype and options.
ft = fittype( 'poly1' );

% Fit model to data.
[fitresult, gof] = fit( xData, yData, ft );

% Plot fit with data.
figure( 'Name', 'untitled fit 4' );
h = plot( fitresult, xData, yData );
hold on;
errorbar( xData, yData, error, '.');
hold off;
legend( h, 'Data Points', 'Best Fit', 'Location', 'NorthEast', 'Interpreter', 'none' );
title("Logarithm of Fractional Uncertainty vs. Logarithm of Photopeak Energy")
text(2.45, -1.7, sprintf('Fit = a*x+b\nSSE = %g\nRsq = %g\nAdj = %g\nRMSE = %g',gof.sse,gof.rsquare,gof.adjrsquare,gof.rmse))
myCoeffs = coeffvalues(fitresult);
intervals = confint(fitresult);
text(2.45, -1.9, sprintf('a = %g (%g, %g)\nb = %g (%g, %g)', myCoeffs(1), intervals(1), intervals(2), myCoeffs(2), intervals(3), intervals(4)))
% Label axes
xlabel( 'Logarithm of Photopeak Energy (keV)', 'Interpreter', 'none' );
ylabel( 'Logarithm of Fractional Uncertainty', 'Interpreter', 'none' );
grid on


